Terminals which are not used

   NEG
   CONS
   PRGM
   DECL
   FUNDEF
   PARAM_DECL
   CMPD_STM
   EXPR
   FCALL
   DECLARATIONL
   DECLARATORL
   STATEL
   PARAMTYPEL
   ARGUEXPRL


State 105 conflicts: 1 shift/reduce


Grammar

    0 $accept: main $end

    1 main: program

    2 program: ext_declaration
    3        | program ext_declaration

    4 ext_declaration: declaration
    5                | funct_def

    6 declaration: INT declarator_list ';'

    7 declarator_list: declarator
    8                | declarator_list ',' declarator

    9 declarator: IDENTIFIER

   10 funct_def: INT declarator '(' param_type_list_opt ')' comp_state

   11 param_type_list_opt: /* empty */
   12                    | param_type_list

   13 param_type_list: param_declaration
   14                | param_type_list ',' param_declaration

   15 param_declaration: INT declarator

   16 state: ';'
   17      | expr ';'
   18      | comp_state
   19      | IF '(' expr ')' state
   20      | IF '(' expr ')' state ELSE state
   21      | WHILE '(' expr ')' state
   22      | RETURN expr ';'

   23 comp_state: '{' declaration_list_opt state_list_opt '}'

   24 declaration_list_opt: /* empty */
   25                     | declaration_list

   26 state_list_opt: /* empty */
   27               | state_list

   28 declaration_list: declaration
   29                 | declaration_list declaration

   30 state_list: state
   31           | state_list state

   32 expr: assign_expr
   33     | expr ',' assign_expr

   34 assign_expr: logical_OR_expr
   35            | IDENTIFIER ASSIGN assign_expr

   36 logical_OR_expr: logical_AND_expr
   37                | logical_OR_expr OR logical_AND_expr

   38 logical_AND_expr: equality_expr
   39                 | logical_AND_expr AND equality_expr

   40 equality_expr: relation_expr
   41              | equality_expr EQ relation_expr
   42              | equality_expr NE relation_expr

   43 relation_expr: add_expr
   44              | relation_expr LT add_expr
   45              | relation_expr MT add_expr
   46              | relation_expr ELT add_expr
   47              | relation_expr EMT add_expr

   48 add_expr: mult_expr
   49         | add_expr PLUS mult_expr
   50         | add_expr MINUS mult_expr

   51 mult_expr: unary_expr
   52          | mult_expr TIMES unary_expr
   53          | mult_expr DIV unary_expr

   54 unary_expr: postfix_expr
   55           | MINUS unary_expr

   56 postfix_expr: prim_expr
   57             | IDENTIFIER '(' argu_expr_list_opt ')'

   58 argu_expr_list_opt: /* empty */
   59                   | argu_expr_list

   60 prim_expr: IDENTIFIER
   61          | CONST
   62          | '(' expr ')'

   63 argu_expr_list: assign_expr
   64               | argu_expr_list ',' assign_expr


Terminals, with rules where they appear

$end (0) 0
'(' (40) 10 19 20 21 57 62
')' (41) 10 19 20 21 57 62
',' (44) 8 14 33 64
';' (59) 6 16 17 22
'{' (123) 23
'}' (125) 23
error (256)
CONST (258) 61
IDENTIFIER (259) 9 35 57 60
INT (260) 6 10 15
IF (261) 19 20
ELSE (262) 20
WHILE (263) 21
RETURN (264) 22
PLUS (265) 49
MINUS (266) 50 55
TIMES (267) 52
DIV (268) 53
ASSIGN (269) 35
OR (270) 37
AND (271) 39
EQ (272) 41
NE (273) 42
LT (274) 44
MT (275) 45
ELT (276) 46
EMT (277) 47
NEG (278)
CONS (279)
PRGM (280)
DECL (281)
FUNDEF (282)
PARAM_DECL (283)
CMPD_STM (284)
EXPR (285)
FCALL (286)
DECLARATIONL (287)
DECLARATORL (288)
STATEL (289)
PARAMTYPEL (290)
ARGUEXPRL (291)


Nonterminals, with rules where they appear

$accept (43)
    on left: 0
main (44)
    on left: 1, on right: 0
program (45)
    on left: 2 3, on right: 1 3
ext_declaration (46)
    on left: 4 5, on right: 2 3
declaration (47)
    on left: 6, on right: 4 28 29
declarator_list (48)
    on left: 7 8, on right: 6 8
declarator (49)
    on left: 9, on right: 7 8 10 15
funct_def (50)
    on left: 10, on right: 5
param_type_list_opt (51)
    on left: 11 12, on right: 10
param_type_list (52)
    on left: 13 14, on right: 12 14
param_declaration (53)
    on left: 15, on right: 13 14
state (54)
    on left: 16 17 18 19 20 21 22, on right: 19 20 21 30 31
comp_state (55)
    on left: 23, on right: 10 18
declaration_list_opt (56)
    on left: 24 25, on right: 23
state_list_opt (57)
    on left: 26 27, on right: 23
declaration_list (58)
    on left: 28 29, on right: 25 29
state_list (59)
    on left: 30 31, on right: 27 31
expr (60)
    on left: 32 33, on right: 17 19 20 21 22 33 62
assign_expr (61)
    on left: 34 35, on right: 32 33 35 63 64
logical_OR_expr (62)
    on left: 36 37, on right: 34 37
logical_AND_expr (63)
    on left: 38 39, on right: 36 37 39
equality_expr (64)
    on left: 40 41 42, on right: 38 39 41 42
relation_expr (65)
    on left: 43 44 45 46 47, on right: 40 41 42 44 45 46 47
add_expr (66)
    on left: 48 49 50, on right: 43 44 45 46 47 49 50
mult_expr (67)
    on left: 51 52 53, on right: 48 49 50 52 53
unary_expr (68)
    on left: 54 55, on right: 51 52 53 55
postfix_expr (69)
    on left: 56 57, on right: 54
argu_expr_list_opt (70)
    on left: 58 59, on right: 57
prim_expr (71)
    on left: 60 61 62, on right: 56
argu_expr_list (72)
    on left: 63 64, on right: 59 64


state 0

    0 $accept: . main $end

    INT  shift, and go to state 1

    main             go to state 2
    program          go to state 3
    ext_declaration  go to state 4
    declaration      go to state 5
    funct_def        go to state 6


state 1

    6 declaration: INT . declarator_list ';'
   10 funct_def: INT . declarator '(' param_type_list_opt ')' comp_state

    IDENTIFIER  shift, and go to state 7

    declarator_list  go to state 8
    declarator       go to state 9


state 2

    0 $accept: main . $end

    $end  shift, and go to state 10


state 3

    1 main: program .
    3 program: program . ext_declaration

    INT  shift, and go to state 1

    $default  reduce using rule 1 (main)

    ext_declaration  go to state 11
    declaration      go to state 5
    funct_def        go to state 6


state 4

    2 program: ext_declaration .

    $default  reduce using rule 2 (program)


state 5

    4 ext_declaration: declaration .

    $default  reduce using rule 4 (ext_declaration)


state 6

    5 ext_declaration: funct_def .

    $default  reduce using rule 5 (ext_declaration)


state 7

    9 declarator: IDENTIFIER .

    $default  reduce using rule 9 (declarator)


state 8

    6 declaration: INT declarator_list . ';'
    8 declarator_list: declarator_list . ',' declarator

    ';'  shift, and go to state 12
    ','  shift, and go to state 13


state 9

    7 declarator_list: declarator .
   10 funct_def: INT declarator . '(' param_type_list_opt ')' comp_state

    '('  shift, and go to state 14

    $default  reduce using rule 7 (declarator_list)


state 10

    0 $accept: main $end .

    $default  accept


state 11

    3 program: program ext_declaration .

    $default  reduce using rule 3 (program)


state 12

    6 declaration: INT declarator_list ';' .

    $default  reduce using rule 6 (declaration)


state 13

    8 declarator_list: declarator_list ',' . declarator

    IDENTIFIER  shift, and go to state 7

    declarator  go to state 15


state 14

   10 funct_def: INT declarator '(' . param_type_list_opt ')' comp_state

    INT  shift, and go to state 16

    $default  reduce using rule 11 (param_type_list_opt)

    param_type_list_opt  go to state 17
    param_type_list      go to state 18
    param_declaration    go to state 19


state 15

    8 declarator_list: declarator_list ',' declarator .

    $default  reduce using rule 8 (declarator_list)


state 16

   15 param_declaration: INT . declarator

    IDENTIFIER  shift, and go to state 7

    declarator  go to state 20


state 17

   10 funct_def: INT declarator '(' param_type_list_opt . ')' comp_state

    ')'  shift, and go to state 21


state 18

   12 param_type_list_opt: param_type_list .
   14 param_type_list: param_type_list . ',' param_declaration

    ','  shift, and go to state 22

    $default  reduce using rule 12 (param_type_list_opt)


state 19

   13 param_type_list: param_declaration .

    $default  reduce using rule 13 (param_type_list)


state 20

   15 param_declaration: INT declarator .

    $default  reduce using rule 15 (param_declaration)


state 21

   10 funct_def: INT declarator '(' param_type_list_opt ')' . comp_state

    '{'  shift, and go to state 23

    comp_state  go to state 24


state 22

   14 param_type_list: param_type_list ',' . param_declaration

    INT  shift, and go to state 16

    param_declaration  go to state 25


state 23

   23 comp_state: '{' . declaration_list_opt state_list_opt '}'

    INT  shift, and go to state 26

    $default  reduce using rule 24 (declaration_list_opt)

    declaration           go to state 27
    declaration_list_opt  go to state 28
    declaration_list      go to state 29


state 24

   10 funct_def: INT declarator '(' param_type_list_opt ')' comp_state .

    $default  reduce using rule 10 (funct_def)


state 25

   14 param_type_list: param_type_list ',' param_declaration .

    $default  reduce using rule 14 (param_type_list)


state 26

    6 declaration: INT . declarator_list ';'

    IDENTIFIER  shift, and go to state 7

    declarator_list  go to state 8
    declarator       go to state 30


state 27

   28 declaration_list: declaration .

    $default  reduce using rule 28 (declaration_list)


state 28

   23 comp_state: '{' declaration_list_opt . state_list_opt '}'

    CONST       shift, and go to state 31
    IDENTIFIER  shift, and go to state 32
    IF          shift, and go to state 33
    WHILE       shift, and go to state 34
    RETURN      shift, and go to state 35
    MINUS       shift, and go to state 36
    ';'         shift, and go to state 37
    '('         shift, and go to state 38
    '{'         shift, and go to state 23

    $default  reduce using rule 26 (state_list_opt)

    state             go to state 39
    comp_state        go to state 40
    state_list_opt    go to state 41
    state_list        go to state 42
    expr              go to state 43
    assign_expr       go to state 44
    logical_OR_expr   go to state 45
    logical_AND_expr  go to state 46
    equality_expr     go to state 47
    relation_expr     go to state 48
    add_expr          go to state 49
    mult_expr         go to state 50
    unary_expr        go to state 51
    postfix_expr      go to state 52
    prim_expr         go to state 53


state 29

   25 declaration_list_opt: declaration_list .
   29 declaration_list: declaration_list . declaration

    INT  shift, and go to state 26

    $default  reduce using rule 25 (declaration_list_opt)

    declaration  go to state 54


state 30

    7 declarator_list: declarator .

    $default  reduce using rule 7 (declarator_list)


state 31

   61 prim_expr: CONST .

    $default  reduce using rule 61 (prim_expr)


state 32

   35 assign_expr: IDENTIFIER . ASSIGN assign_expr
   57 postfix_expr: IDENTIFIER . '(' argu_expr_list_opt ')'
   60 prim_expr: IDENTIFIER .

    ASSIGN  shift, and go to state 55
    '('     shift, and go to state 56

    $default  reduce using rule 60 (prim_expr)


state 33

   19 state: IF . '(' expr ')' state
   20      | IF . '(' expr ')' state ELSE state

    '('  shift, and go to state 57


state 34

   21 state: WHILE . '(' expr ')' state

    '('  shift, and go to state 58


state 35

   22 state: RETURN . expr ';'

    CONST       shift, and go to state 31
    IDENTIFIER  shift, and go to state 32
    MINUS       shift, and go to state 36
    '('         shift, and go to state 38

    expr              go to state 59
    assign_expr       go to state 44
    logical_OR_expr   go to state 45
    logical_AND_expr  go to state 46
    equality_expr     go to state 47
    relation_expr     go to state 48
    add_expr          go to state 49
    mult_expr         go to state 50
    unary_expr        go to state 51
    postfix_expr      go to state 52
    prim_expr         go to state 53


state 36

   55 unary_expr: MINUS . unary_expr

    CONST       shift, and go to state 31
    IDENTIFIER  shift, and go to state 60
    MINUS       shift, and go to state 36
    '('         shift, and go to state 38

    unary_expr    go to state 61
    postfix_expr  go to state 52
    prim_expr     go to state 53


state 37

   16 state: ';' .

    $default  reduce using rule 16 (state)


state 38

   62 prim_expr: '(' . expr ')'

    CONST       shift, and go to state 31
    IDENTIFIER  shift, and go to state 32
    MINUS       shift, and go to state 36
    '('         shift, and go to state 38

    expr              go to state 62
    assign_expr       go to state 44
    logical_OR_expr   go to state 45
    logical_AND_expr  go to state 46
    equality_expr     go to state 47
    relation_expr     go to state 48
    add_expr          go to state 49
    mult_expr         go to state 50
    unary_expr        go to state 51
    postfix_expr      go to state 52
    prim_expr         go to state 53


state 39

   30 state_list: state .

    $default  reduce using rule 30 (state_list)


state 40

   18 state: comp_state .

    $default  reduce using rule 18 (state)


state 41

   23 comp_state: '{' declaration_list_opt state_list_opt . '}'

    '}'  shift, and go to state 63


state 42

   27 state_list_opt: state_list .
   31 state_list: state_list . state

    CONST       shift, and go to state 31
    IDENTIFIER  shift, and go to state 32
    IF          shift, and go to state 33
    WHILE       shift, and go to state 34
    RETURN      shift, and go to state 35
    MINUS       shift, and go to state 36
    ';'         shift, and go to state 37
    '('         shift, and go to state 38
    '{'         shift, and go to state 23

    $default  reduce using rule 27 (state_list_opt)

    state             go to state 64
    comp_state        go to state 40
    expr              go to state 43
    assign_expr       go to state 44
    logical_OR_expr   go to state 45
    logical_AND_expr  go to state 46
    equality_expr     go to state 47
    relation_expr     go to state 48
    add_expr          go to state 49
    mult_expr         go to state 50
    unary_expr        go to state 51
    postfix_expr      go to state 52
    prim_expr         go to state 53


state 43

   17 state: expr . ';'
   33 expr: expr . ',' assign_expr

    ';'  shift, and go to state 65
    ','  shift, and go to state 66


state 44

   32 expr: assign_expr .

    $default  reduce using rule 32 (expr)


state 45

   34 assign_expr: logical_OR_expr .
   37 logical_OR_expr: logical_OR_expr . OR logical_AND_expr

    OR  shift, and go to state 67

    $default  reduce using rule 34 (assign_expr)


state 46

   36 logical_OR_expr: logical_AND_expr .
   39 logical_AND_expr: logical_AND_expr . AND equality_expr

    AND  shift, and go to state 68

    $default  reduce using rule 36 (logical_OR_expr)


state 47

   38 logical_AND_expr: equality_expr .
   41 equality_expr: equality_expr . EQ relation_expr
   42              | equality_expr . NE relation_expr

    EQ  shift, and go to state 69
    NE  shift, and go to state 70

    $default  reduce using rule 38 (logical_AND_expr)


state 48

   40 equality_expr: relation_expr .
   44 relation_expr: relation_expr . LT add_expr
   45              | relation_expr . MT add_expr
   46              | relation_expr . ELT add_expr
   47              | relation_expr . EMT add_expr

    LT   shift, and go to state 71
    MT   shift, and go to state 72
    ELT  shift, and go to state 73
    EMT  shift, and go to state 74

    $default  reduce using rule 40 (equality_expr)


state 49

   43 relation_expr: add_expr .
   49 add_expr: add_expr . PLUS mult_expr
   50         | add_expr . MINUS mult_expr

    PLUS   shift, and go to state 75
    MINUS  shift, and go to state 76

    $default  reduce using rule 43 (relation_expr)


state 50

   48 add_expr: mult_expr .
   52 mult_expr: mult_expr . TIMES unary_expr
   53          | mult_expr . DIV unary_expr

    TIMES  shift, and go to state 77
    DIV    shift, and go to state 78

    $default  reduce using rule 48 (add_expr)


state 51

   51 mult_expr: unary_expr .

    $default  reduce using rule 51 (mult_expr)


state 52

   54 unary_expr: postfix_expr .

    $default  reduce using rule 54 (unary_expr)


state 53

   56 postfix_expr: prim_expr .

    $default  reduce using rule 56 (postfix_expr)


state 54

   29 declaration_list: declaration_list declaration .

    $default  reduce using rule 29 (declaration_list)


state 55

   35 assign_expr: IDENTIFIER ASSIGN . assign_expr

    CONST       shift, and go to state 31
    IDENTIFIER  shift, and go to state 32
    MINUS       shift, and go to state 36
    '('         shift, and go to state 38

    assign_expr       go to state 79
    logical_OR_expr   go to state 45
    logical_AND_expr  go to state 46
    equality_expr     go to state 47
    relation_expr     go to state 48
    add_expr          go to state 49
    mult_expr         go to state 50
    unary_expr        go to state 51
    postfix_expr      go to state 52
    prim_expr         go to state 53


state 56

   57 postfix_expr: IDENTIFIER '(' . argu_expr_list_opt ')'

    CONST       shift, and go to state 31
    IDENTIFIER  shift, and go to state 32
    MINUS       shift, and go to state 36
    '('         shift, and go to state 38

    $default  reduce using rule 58 (argu_expr_list_opt)

    assign_expr         go to state 80
    logical_OR_expr     go to state 45
    logical_AND_expr    go to state 46
    equality_expr       go to state 47
    relation_expr       go to state 48
    add_expr            go to state 49
    mult_expr           go to state 50
    unary_expr          go to state 51
    postfix_expr        go to state 52
    argu_expr_list_opt  go to state 81
    prim_expr           go to state 53
    argu_expr_list      go to state 82


state 57

   19 state: IF '(' . expr ')' state
   20      | IF '(' . expr ')' state ELSE state

    CONST       shift, and go to state 31
    IDENTIFIER  shift, and go to state 32
    MINUS       shift, and go to state 36
    '('         shift, and go to state 38

    expr              go to state 83
    assign_expr       go to state 44
    logical_OR_expr   go to state 45
    logical_AND_expr  go to state 46
    equality_expr     go to state 47
    relation_expr     go to state 48
    add_expr          go to state 49
    mult_expr         go to state 50
    unary_expr        go to state 51
    postfix_expr      go to state 52
    prim_expr         go to state 53


state 58

   21 state: WHILE '(' . expr ')' state

    CONST       shift, and go to state 31
    IDENTIFIER  shift, and go to state 32
    MINUS       shift, and go to state 36
    '('         shift, and go to state 38

    expr              go to state 84
    assign_expr       go to state 44
    logical_OR_expr   go to state 45
    logical_AND_expr  go to state 46
    equality_expr     go to state 47
    relation_expr     go to state 48
    add_expr          go to state 49
    mult_expr         go to state 50
    unary_expr        go to state 51
    postfix_expr      go to state 52
    prim_expr         go to state 53


state 59

   22 state: RETURN expr . ';'
   33 expr: expr . ',' assign_expr

    ';'  shift, and go to state 85
    ','  shift, and go to state 66


state 60

   57 postfix_expr: IDENTIFIER . '(' argu_expr_list_opt ')'
   60 prim_expr: IDENTIFIER .

    '('  shift, and go to state 56

    $default  reduce using rule 60 (prim_expr)


state 61

   55 unary_expr: MINUS unary_expr .

    $default  reduce using rule 55 (unary_expr)


state 62

   33 expr: expr . ',' assign_expr
   62 prim_expr: '(' expr . ')'

    ','  shift, and go to state 66
    ')'  shift, and go to state 86


state 63

   23 comp_state: '{' declaration_list_opt state_list_opt '}' .

    $default  reduce using rule 23 (comp_state)


state 64

   31 state_list: state_list state .

    $default  reduce using rule 31 (state_list)


state 65

   17 state: expr ';' .

    $default  reduce using rule 17 (state)


state 66

   33 expr: expr ',' . assign_expr

    CONST       shift, and go to state 31
    IDENTIFIER  shift, and go to state 32
    MINUS       shift, and go to state 36
    '('         shift, and go to state 38

    assign_expr       go to state 87
    logical_OR_expr   go to state 45
    logical_AND_expr  go to state 46
    equality_expr     go to state 47
    relation_expr     go to state 48
    add_expr          go to state 49
    mult_expr         go to state 50
    unary_expr        go to state 51
    postfix_expr      go to state 52
    prim_expr         go to state 53


state 67

   37 logical_OR_expr: logical_OR_expr OR . logical_AND_expr

    CONST       shift, and go to state 31
    IDENTIFIER  shift, and go to state 60
    MINUS       shift, and go to state 36
    '('         shift, and go to state 38

    logical_AND_expr  go to state 88
    equality_expr     go to state 47
    relation_expr     go to state 48
    add_expr          go to state 49
    mult_expr         go to state 50
    unary_expr        go to state 51
    postfix_expr      go to state 52
    prim_expr         go to state 53


state 68

   39 logical_AND_expr: logical_AND_expr AND . equality_expr

    CONST       shift, and go to state 31
    IDENTIFIER  shift, and go to state 60
    MINUS       shift, and go to state 36
    '('         shift, and go to state 38

    equality_expr  go to state 89
    relation_expr  go to state 48
    add_expr       go to state 49
    mult_expr      go to state 50
    unary_expr     go to state 51
    postfix_expr   go to state 52
    prim_expr      go to state 53


state 69

   41 equality_expr: equality_expr EQ . relation_expr

    CONST       shift, and go to state 31
    IDENTIFIER  shift, and go to state 60
    MINUS       shift, and go to state 36
    '('         shift, and go to state 38

    relation_expr  go to state 90
    add_expr       go to state 49
    mult_expr      go to state 50
    unary_expr     go to state 51
    postfix_expr   go to state 52
    prim_expr      go to state 53


state 70

   42 equality_expr: equality_expr NE . relation_expr

    CONST       shift, and go to state 31
    IDENTIFIER  shift, and go to state 60
    MINUS       shift, and go to state 36
    '('         shift, and go to state 38

    relation_expr  go to state 91
    add_expr       go to state 49
    mult_expr      go to state 50
    unary_expr     go to state 51
    postfix_expr   go to state 52
    prim_expr      go to state 53


state 71

   44 relation_expr: relation_expr LT . add_expr

    CONST       shift, and go to state 31
    IDENTIFIER  shift, and go to state 60
    MINUS       shift, and go to state 36
    '('         shift, and go to state 38

    add_expr      go to state 92
    mult_expr     go to state 50
    unary_expr    go to state 51
    postfix_expr  go to state 52
    prim_expr     go to state 53


state 72

   45 relation_expr: relation_expr MT . add_expr

    CONST       shift, and go to state 31
    IDENTIFIER  shift, and go to state 60
    MINUS       shift, and go to state 36
    '('         shift, and go to state 38

    add_expr      go to state 93
    mult_expr     go to state 50
    unary_expr    go to state 51
    postfix_expr  go to state 52
    prim_expr     go to state 53


state 73

   46 relation_expr: relation_expr ELT . add_expr

    CONST       shift, and go to state 31
    IDENTIFIER  shift, and go to state 60
    MINUS       shift, and go to state 36
    '('         shift, and go to state 38

    add_expr      go to state 94
    mult_expr     go to state 50
    unary_expr    go to state 51
    postfix_expr  go to state 52
    prim_expr     go to state 53


state 74

   47 relation_expr: relation_expr EMT . add_expr

    CONST       shift, and go to state 31
    IDENTIFIER  shift, and go to state 60
    MINUS       shift, and go to state 36
    '('         shift, and go to state 38

    add_expr      go to state 95
    mult_expr     go to state 50
    unary_expr    go to state 51
    postfix_expr  go to state 52
    prim_expr     go to state 53


state 75

   49 add_expr: add_expr PLUS . mult_expr

    CONST       shift, and go to state 31
    IDENTIFIER  shift, and go to state 60
    MINUS       shift, and go to state 36
    '('         shift, and go to state 38

    mult_expr     go to state 96
    unary_expr    go to state 51
    postfix_expr  go to state 52
    prim_expr     go to state 53


state 76

   50 add_expr: add_expr MINUS . mult_expr

    CONST       shift, and go to state 31
    IDENTIFIER  shift, and go to state 60
    MINUS       shift, and go to state 36
    '('         shift, and go to state 38

    mult_expr     go to state 97
    unary_expr    go to state 51
    postfix_expr  go to state 52
    prim_expr     go to state 53


state 77

   52 mult_expr: mult_expr TIMES . unary_expr

    CONST       shift, and go to state 31
    IDENTIFIER  shift, and go to state 60
    MINUS       shift, and go to state 36
    '('         shift, and go to state 38

    unary_expr    go to state 98
    postfix_expr  go to state 52
    prim_expr     go to state 53


state 78

   53 mult_expr: mult_expr DIV . unary_expr

    CONST       shift, and go to state 31
    IDENTIFIER  shift, and go to state 60
    MINUS       shift, and go to state 36
    '('         shift, and go to state 38

    unary_expr    go to state 99
    postfix_expr  go to state 52
    prim_expr     go to state 53


state 79

   35 assign_expr: IDENTIFIER ASSIGN assign_expr .

    $default  reduce using rule 35 (assign_expr)


state 80

   63 argu_expr_list: assign_expr .

    $default  reduce using rule 63 (argu_expr_list)


state 81

   57 postfix_expr: IDENTIFIER '(' argu_expr_list_opt . ')'

    ')'  shift, and go to state 100


state 82

   59 argu_expr_list_opt: argu_expr_list .
   64 argu_expr_list: argu_expr_list . ',' assign_expr

    ','  shift, and go to state 101

    $default  reduce using rule 59 (argu_expr_list_opt)


state 83

   19 state: IF '(' expr . ')' state
   20      | IF '(' expr . ')' state ELSE state
   33 expr: expr . ',' assign_expr

    ','  shift, and go to state 66
    ')'  shift, and go to state 102


state 84

   21 state: WHILE '(' expr . ')' state
   33 expr: expr . ',' assign_expr

    ','  shift, and go to state 66
    ')'  shift, and go to state 103


state 85

   22 state: RETURN expr ';' .

    $default  reduce using rule 22 (state)


state 86

   62 prim_expr: '(' expr ')' .

    $default  reduce using rule 62 (prim_expr)


state 87

   33 expr: expr ',' assign_expr .

    $default  reduce using rule 33 (expr)


state 88

   37 logical_OR_expr: logical_OR_expr OR logical_AND_expr .
   39 logical_AND_expr: logical_AND_expr . AND equality_expr

    AND  shift, and go to state 68

    $default  reduce using rule 37 (logical_OR_expr)


state 89

   39 logical_AND_expr: logical_AND_expr AND equality_expr .
   41 equality_expr: equality_expr . EQ relation_expr
   42              | equality_expr . NE relation_expr

    EQ  shift, and go to state 69
    NE  shift, and go to state 70

    $default  reduce using rule 39 (logical_AND_expr)


state 90

   41 equality_expr: equality_expr EQ relation_expr .
   44 relation_expr: relation_expr . LT add_expr
   45              | relation_expr . MT add_expr
   46              | relation_expr . ELT add_expr
   47              | relation_expr . EMT add_expr

    LT   shift, and go to state 71
    MT   shift, and go to state 72
    ELT  shift, and go to state 73
    EMT  shift, and go to state 74

    $default  reduce using rule 41 (equality_expr)


state 91

   42 equality_expr: equality_expr NE relation_expr .
   44 relation_expr: relation_expr . LT add_expr
   45              | relation_expr . MT add_expr
   46              | relation_expr . ELT add_expr
   47              | relation_expr . EMT add_expr

    LT   shift, and go to state 71
    MT   shift, and go to state 72
    ELT  shift, and go to state 73
    EMT  shift, and go to state 74

    $default  reduce using rule 42 (equality_expr)


state 92

   44 relation_expr: relation_expr LT add_expr .
   49 add_expr: add_expr . PLUS mult_expr
   50         | add_expr . MINUS mult_expr

    PLUS   shift, and go to state 75
    MINUS  shift, and go to state 76

    $default  reduce using rule 44 (relation_expr)


state 93

   45 relation_expr: relation_expr MT add_expr .
   49 add_expr: add_expr . PLUS mult_expr
   50         | add_expr . MINUS mult_expr

    PLUS   shift, and go to state 75
    MINUS  shift, and go to state 76

    $default  reduce using rule 45 (relation_expr)


state 94

   46 relation_expr: relation_expr ELT add_expr .
   49 add_expr: add_expr . PLUS mult_expr
   50         | add_expr . MINUS mult_expr

    PLUS   shift, and go to state 75
    MINUS  shift, and go to state 76

    $default  reduce using rule 46 (relation_expr)


state 95

   47 relation_expr: relation_expr EMT add_expr .
   49 add_expr: add_expr . PLUS mult_expr
   50         | add_expr . MINUS mult_expr

    PLUS   shift, and go to state 75
    MINUS  shift, and go to state 76

    $default  reduce using rule 47 (relation_expr)


state 96

   49 add_expr: add_expr PLUS mult_expr .
   52 mult_expr: mult_expr . TIMES unary_expr
   53          | mult_expr . DIV unary_expr

    TIMES  shift, and go to state 77
    DIV    shift, and go to state 78

    $default  reduce using rule 49 (add_expr)


state 97

   50 add_expr: add_expr MINUS mult_expr .
   52 mult_expr: mult_expr . TIMES unary_expr
   53          | mult_expr . DIV unary_expr

    TIMES  shift, and go to state 77
    DIV    shift, and go to state 78

    $default  reduce using rule 50 (add_expr)


state 98

   52 mult_expr: mult_expr TIMES unary_expr .

    $default  reduce using rule 52 (mult_expr)


state 99

   53 mult_expr: mult_expr DIV unary_expr .

    $default  reduce using rule 53 (mult_expr)


state 100

   57 postfix_expr: IDENTIFIER '(' argu_expr_list_opt ')' .

    $default  reduce using rule 57 (postfix_expr)


state 101

   64 argu_expr_list: argu_expr_list ',' . assign_expr

    CONST       shift, and go to state 31
    IDENTIFIER  shift, and go to state 32
    MINUS       shift, and go to state 36
    '('         shift, and go to state 38

    assign_expr       go to state 104
    logical_OR_expr   go to state 45
    logical_AND_expr  go to state 46
    equality_expr     go to state 47
    relation_expr     go to state 48
    add_expr          go to state 49
    mult_expr         go to state 50
    unary_expr        go to state 51
    postfix_expr      go to state 52
    prim_expr         go to state 53


state 102

   19 state: IF '(' expr ')' . state
   20      | IF '(' expr ')' . state ELSE state

    CONST       shift, and go to state 31
    IDENTIFIER  shift, and go to state 32
    IF          shift, and go to state 33
    WHILE       shift, and go to state 34
    RETURN      shift, and go to state 35
    MINUS       shift, and go to state 36
    ';'         shift, and go to state 37
    '('         shift, and go to state 38
    '{'         shift, and go to state 23

    state             go to state 105
    comp_state        go to state 40
    expr              go to state 43
    assign_expr       go to state 44
    logical_OR_expr   go to state 45
    logical_AND_expr  go to state 46
    equality_expr     go to state 47
    relation_expr     go to state 48
    add_expr          go to state 49
    mult_expr         go to state 50
    unary_expr        go to state 51
    postfix_expr      go to state 52
    prim_expr         go to state 53


state 103

   21 state: WHILE '(' expr ')' . state

    CONST       shift, and go to state 31
    IDENTIFIER  shift, and go to state 32
    IF          shift, and go to state 33
    WHILE       shift, and go to state 34
    RETURN      shift, and go to state 35
    MINUS       shift, and go to state 36
    ';'         shift, and go to state 37
    '('         shift, and go to state 38
    '{'         shift, and go to state 23

    state             go to state 106
    comp_state        go to state 40
    expr              go to state 43
    assign_expr       go to state 44
    logical_OR_expr   go to state 45
    logical_AND_expr  go to state 46
    equality_expr     go to state 47
    relation_expr     go to state 48
    add_expr          go to state 49
    mult_expr         go to state 50
    unary_expr        go to state 51
    postfix_expr      go to state 52
    prim_expr         go to state 53


state 104

   64 argu_expr_list: argu_expr_list ',' assign_expr .

    $default  reduce using rule 64 (argu_expr_list)


state 105

   19 state: IF '(' expr ')' state .
   20      | IF '(' expr ')' state . ELSE state

    ELSE  shift, and go to state 107

    ELSE      [reduce using rule 19 (state)]
    $default  reduce using rule 19 (state)


state 106

   21 state: WHILE '(' expr ')' state .

    $default  reduce using rule 21 (state)


state 107

   20 state: IF '(' expr ')' state ELSE . state

    CONST       shift, and go to state 31
    IDENTIFIER  shift, and go to state 32
    IF          shift, and go to state 33
    WHILE       shift, and go to state 34
    RETURN      shift, and go to state 35
    MINUS       shift, and go to state 36
    ';'         shift, and go to state 37
    '('         shift, and go to state 38
    '{'         shift, and go to state 23

    state             go to state 108
    comp_state        go to state 40
    expr              go to state 43
    assign_expr       go to state 44
    logical_OR_expr   go to state 45
    logical_AND_expr  go to state 46
    equality_expr     go to state 47
    relation_expr     go to state 48
    add_expr          go to state 49
    mult_expr         go to state 50
    unary_expr        go to state 51
    postfix_expr      go to state 52
    prim_expr         go to state 53


state 108

   20 state: IF '(' expr ')' state ELSE state .

    $default  reduce using rule 20 (state)
