Terminals which are not used

   NEG
   CONS
   PRGM
   DECL
   FUNDEF
   PARAM_DECL
   CMPD_STM
   EXPR
   FCALL
   DECLARATIONL
   DECLARATORL
   STATEL
   PARAMTYPEL
   ARGUEXPRL


State 109 conflicts: 1 shift/reduce


Grammar

    0 $accept: main $end

    1 @1: /* empty */

    2 main: @1 program

    3 program: ext_declaration
    4        | program ext_declaration

    5 ext_declaration: declaration
    6                | funct_def

    7 declaration: INT declarator_list ';'

    8 declarator_list: declarator
    9                | declarator_list ',' declarator

   10 declarator: IDENTIFIER

   11 @2: /* empty */

   12 @3: /* empty */

   13 funct_def: INT declarator '(' @2 param_type_list_opt @3 ')' comp_state

   14 param_type_list_opt: /* empty */
   15                    | param_type_list

   16 param_type_list: param_declaration
   17                | param_type_list ',' param_declaration

   18 param_declaration: INT declarator

   19 state: ';'
   20      | expr ';'
   21      | comp_state
   22      | IF '(' expr ')' state
   23      | IF '(' expr ')' state ELSE state
   24      | WHILE '(' expr ')' state
   25      | RETURN expr ';'

   26 @4: /* empty */

   27 comp_state: '{' @4 declaration_list_opt state_list_opt '}'

   28 declaration_list_opt: /* empty */
   29                     | declaration_list

   30 state_list_opt: /* empty */
   31               | state_list

   32 declaration_list: declaration
   33                 | declaration_list declaration

   34 state_list: state
   35           | state_list state

   36 expr: assign_expr
   37     | expr ',' assign_expr

   38 assign_expr: logical_OR_expr
   39            | IDENTIFIER ASSIGN assign_expr

   40 logical_OR_expr: logical_AND_expr
   41                | logical_OR_expr OR logical_AND_expr

   42 logical_AND_expr: equality_expr
   43                 | logical_AND_expr AND equality_expr

   44 equality_expr: relation_expr
   45              | equality_expr EQ relation_expr
   46              | equality_expr NE relation_expr

   47 relation_expr: add_expr
   48              | relation_expr LT add_expr
   49              | relation_expr MT add_expr
   50              | relation_expr ELT add_expr
   51              | relation_expr EMT add_expr

   52 add_expr: mult_expr
   53         | add_expr PLUS mult_expr
   54         | add_expr MINUS mult_expr

   55 mult_expr: unary_expr
   56          | mult_expr TIMES unary_expr
   57          | mult_expr DIV unary_expr

   58 unary_expr: postfix_expr
   59           | MINUS unary_expr

   60 postfix_expr: prim_expr
   61             | IDENTIFIER '(' argu_expr_list_opt ')'

   62 argu_expr_list_opt: /* empty */
   63                   | argu_expr_list

   64 prim_expr: IDENTIFIER
   65          | CONST
   66          | '(' expr ')'

   67 argu_expr_list: assign_expr
   68               | argu_expr_list ',' assign_expr


Terminals, with rules where they appear

$end (0) 0
'(' (40) 13 22 23 24 61 66
')' (41) 13 22 23 24 61 66
',' (44) 9 17 37 68
';' (59) 7 19 20 25
'{' (123) 27
'}' (125) 27
error (256)
CONST (258) 65
IDENTIFIER (259) 10 39 61 64
INT (260) 7 13 18
IF (261) 22 23
ELSE (262) 23
WHILE (263) 24
RETURN (264) 25
PLUS (265) 53
MINUS (266) 54 59
TIMES (267) 56
DIV (268) 57
ASSIGN (269) 39
OR (270) 41
AND (271) 43
EQ (272) 45
NE (273) 46
LT (274) 48
MT (275) 49
ELT (276) 50
EMT (277) 51
NEG (278)
CONS (279)
PRGM (280)
DECL (281)
FUNDEF (282)
PARAM_DECL (283)
CMPD_STM (284)
EXPR (285)
FCALL (286)
DECLARATIONL (287)
DECLARATORL (288)
STATEL (289)
PARAMTYPEL (290)
ARGUEXPRL (291)


Nonterminals, with rules where they appear

$accept (43)
    on left: 0
main (44)
    on left: 2, on right: 0
@1 (45)
    on left: 1, on right: 2
program (46)
    on left: 3 4, on right: 2 4
ext_declaration (47)
    on left: 5 6, on right: 3 4
declaration (48)
    on left: 7, on right: 5 32 33
declarator_list (49)
    on left: 8 9, on right: 7 9
declarator (50)
    on left: 10, on right: 8 9 13 18
funct_def (51)
    on left: 13, on right: 6
@2 (52)
    on left: 11, on right: 13
@3 (53)
    on left: 12, on right: 13
param_type_list_opt (54)
    on left: 14 15, on right: 13
param_type_list (55)
    on left: 16 17, on right: 15 17
param_declaration (56)
    on left: 18, on right: 16 17
state (57)
    on left: 19 20 21 22 23 24 25, on right: 22 23 24 34 35
comp_state (58)
    on left: 27, on right: 13 21
@4 (59)
    on left: 26, on right: 27
declaration_list_opt (60)
    on left: 28 29, on right: 27
state_list_opt (61)
    on left: 30 31, on right: 27
declaration_list (62)
    on left: 32 33, on right: 29 33
state_list (63)
    on left: 34 35, on right: 31 35
expr (64)
    on left: 36 37, on right: 20 22 23 24 25 37 66
assign_expr (65)
    on left: 38 39, on right: 36 37 39 67 68
logical_OR_expr (66)
    on left: 40 41, on right: 38 41
logical_AND_expr (67)
    on left: 42 43, on right: 40 41 43
equality_expr (68)
    on left: 44 45 46, on right: 42 43 45 46
relation_expr (69)
    on left: 47 48 49 50 51, on right: 44 45 46 48 49 50 51
add_expr (70)
    on left: 52 53 54, on right: 47 48 49 50 51 53 54
mult_expr (71)
    on left: 55 56 57, on right: 52 53 54 56 57
unary_expr (72)
    on left: 58 59, on right: 55 56 57 59
postfix_expr (73)
    on left: 60 61, on right: 58
argu_expr_list_opt (74)
    on left: 62 63, on right: 61
prim_expr (75)
    on left: 64 65 66, on right: 60
argu_expr_list (76)
    on left: 67 68, on right: 63 68


state 0

    0 $accept: . main $end

    $default  reduce using rule 1 (@1)

    main  go to state 1
    @1    go to state 2


state 1

    0 $accept: main . $end

    $end  shift, and go to state 3


state 2

    2 main: @1 . program

    INT  shift, and go to state 4

    program          go to state 5
    ext_declaration  go to state 6
    declaration      go to state 7
    funct_def        go to state 8


state 3

    0 $accept: main $end .

    $default  accept


state 4

    7 declaration: INT . declarator_list ';'
   13 funct_def: INT . declarator '(' @2 param_type_list_opt @3 ')' comp_state

    IDENTIFIER  shift, and go to state 9

    declarator_list  go to state 10
    declarator       go to state 11


state 5

    2 main: @1 program .
    4 program: program . ext_declaration

    INT  shift, and go to state 4

    $default  reduce using rule 2 (main)

    ext_declaration  go to state 12
    declaration      go to state 7
    funct_def        go to state 8


state 6

    3 program: ext_declaration .

    $default  reduce using rule 3 (program)


state 7

    5 ext_declaration: declaration .

    $default  reduce using rule 5 (ext_declaration)


state 8

    6 ext_declaration: funct_def .

    $default  reduce using rule 6 (ext_declaration)


state 9

   10 declarator: IDENTIFIER .

    $default  reduce using rule 10 (declarator)


state 10

    7 declaration: INT declarator_list . ';'
    9 declarator_list: declarator_list . ',' declarator

    ';'  shift, and go to state 13
    ','  shift, and go to state 14


state 11

    8 declarator_list: declarator .
   13 funct_def: INT declarator . '(' @2 param_type_list_opt @3 ')' comp_state

    '('  shift, and go to state 15

    $default  reduce using rule 8 (declarator_list)


state 12

    4 program: program ext_declaration .

    $default  reduce using rule 4 (program)


state 13

    7 declaration: INT declarator_list ';' .

    $default  reduce using rule 7 (declaration)


state 14

    9 declarator_list: declarator_list ',' . declarator

    IDENTIFIER  shift, and go to state 9

    declarator  go to state 16


state 15

   13 funct_def: INT declarator '(' . @2 param_type_list_opt @3 ')' comp_state

    $default  reduce using rule 11 (@2)

    @2  go to state 17


state 16

    9 declarator_list: declarator_list ',' declarator .

    $default  reduce using rule 9 (declarator_list)


state 17

   13 funct_def: INT declarator '(' @2 . param_type_list_opt @3 ')' comp_state

    INT  shift, and go to state 18

    $default  reduce using rule 14 (param_type_list_opt)

    param_type_list_opt  go to state 19
    param_type_list      go to state 20
    param_declaration    go to state 21


state 18

   18 param_declaration: INT . declarator

    IDENTIFIER  shift, and go to state 9

    declarator  go to state 22


state 19

   13 funct_def: INT declarator '(' @2 param_type_list_opt . @3 ')' comp_state

    $default  reduce using rule 12 (@3)

    @3  go to state 23


state 20

   15 param_type_list_opt: param_type_list .
   17 param_type_list: param_type_list . ',' param_declaration

    ','  shift, and go to state 24

    $default  reduce using rule 15 (param_type_list_opt)


state 21

   16 param_type_list: param_declaration .

    $default  reduce using rule 16 (param_type_list)


state 22

   18 param_declaration: INT declarator .

    $default  reduce using rule 18 (param_declaration)


state 23

   13 funct_def: INT declarator '(' @2 param_type_list_opt @3 . ')' comp_state

    ')'  shift, and go to state 25


state 24

   17 param_type_list: param_type_list ',' . param_declaration

    INT  shift, and go to state 18

    param_declaration  go to state 26


state 25

   13 funct_def: INT declarator '(' @2 param_type_list_opt @3 ')' . comp_state

    '{'  shift, and go to state 27

    comp_state  go to state 28


state 26

   17 param_type_list: param_type_list ',' param_declaration .

    $default  reduce using rule 17 (param_type_list)


state 27

   27 comp_state: '{' . @4 declaration_list_opt state_list_opt '}'

    $default  reduce using rule 26 (@4)

    @4  go to state 29


state 28

   13 funct_def: INT declarator '(' @2 param_type_list_opt @3 ')' comp_state .

    $default  reduce using rule 13 (funct_def)


state 29

   27 comp_state: '{' @4 . declaration_list_opt state_list_opt '}'

    INT  shift, and go to state 30

    $default  reduce using rule 28 (declaration_list_opt)

    declaration           go to state 31
    declaration_list_opt  go to state 32
    declaration_list      go to state 33


state 30

    7 declaration: INT . declarator_list ';'

    IDENTIFIER  shift, and go to state 9

    declarator_list  go to state 10
    declarator       go to state 34


state 31

   32 declaration_list: declaration .

    $default  reduce using rule 32 (declaration_list)


state 32

   27 comp_state: '{' @4 declaration_list_opt . state_list_opt '}'

    CONST       shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    IF          shift, and go to state 37
    WHILE       shift, and go to state 38
    RETURN      shift, and go to state 39
    MINUS       shift, and go to state 40
    ';'         shift, and go to state 41
    '('         shift, and go to state 42
    '{'         shift, and go to state 27

    $default  reduce using rule 30 (state_list_opt)

    state             go to state 43
    comp_state        go to state 44
    state_list_opt    go to state 45
    state_list        go to state 46
    expr              go to state 47
    assign_expr       go to state 48
    logical_OR_expr   go to state 49
    logical_AND_expr  go to state 50
    equality_expr     go to state 51
    relation_expr     go to state 52
    add_expr          go to state 53
    mult_expr         go to state 54
    unary_expr        go to state 55
    postfix_expr      go to state 56
    prim_expr         go to state 57


state 33

   29 declaration_list_opt: declaration_list .
   33 declaration_list: declaration_list . declaration

    INT  shift, and go to state 30

    $default  reduce using rule 29 (declaration_list_opt)

    declaration  go to state 58


state 34

    8 declarator_list: declarator .

    $default  reduce using rule 8 (declarator_list)


state 35

   65 prim_expr: CONST .

    $default  reduce using rule 65 (prim_expr)


state 36

   39 assign_expr: IDENTIFIER . ASSIGN assign_expr
   61 postfix_expr: IDENTIFIER . '(' argu_expr_list_opt ')'
   64 prim_expr: IDENTIFIER .

    ASSIGN  shift, and go to state 59
    '('     shift, and go to state 60

    $default  reduce using rule 64 (prim_expr)


state 37

   22 state: IF . '(' expr ')' state
   23      | IF . '(' expr ')' state ELSE state

    '('  shift, and go to state 61


state 38

   24 state: WHILE . '(' expr ')' state

    '('  shift, and go to state 62


state 39

   25 state: RETURN . expr ';'

    CONST       shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    MINUS       shift, and go to state 40
    '('         shift, and go to state 42

    expr              go to state 63
    assign_expr       go to state 48
    logical_OR_expr   go to state 49
    logical_AND_expr  go to state 50
    equality_expr     go to state 51
    relation_expr     go to state 52
    add_expr          go to state 53
    mult_expr         go to state 54
    unary_expr        go to state 55
    postfix_expr      go to state 56
    prim_expr         go to state 57


state 40

   59 unary_expr: MINUS . unary_expr

    CONST       shift, and go to state 35
    IDENTIFIER  shift, and go to state 64
    MINUS       shift, and go to state 40
    '('         shift, and go to state 42

    unary_expr    go to state 65
    postfix_expr  go to state 56
    prim_expr     go to state 57


state 41

   19 state: ';' .

    $default  reduce using rule 19 (state)


state 42

   66 prim_expr: '(' . expr ')'

    CONST       shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    MINUS       shift, and go to state 40
    '('         shift, and go to state 42

    expr              go to state 66
    assign_expr       go to state 48
    logical_OR_expr   go to state 49
    logical_AND_expr  go to state 50
    equality_expr     go to state 51
    relation_expr     go to state 52
    add_expr          go to state 53
    mult_expr         go to state 54
    unary_expr        go to state 55
    postfix_expr      go to state 56
    prim_expr         go to state 57


state 43

   34 state_list: state .

    $default  reduce using rule 34 (state_list)


state 44

   21 state: comp_state .

    $default  reduce using rule 21 (state)


state 45

   27 comp_state: '{' @4 declaration_list_opt state_list_opt . '}'

    '}'  shift, and go to state 67


state 46

   31 state_list_opt: state_list .
   35 state_list: state_list . state

    CONST       shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    IF          shift, and go to state 37
    WHILE       shift, and go to state 38
    RETURN      shift, and go to state 39
    MINUS       shift, and go to state 40
    ';'         shift, and go to state 41
    '('         shift, and go to state 42
    '{'         shift, and go to state 27

    $default  reduce using rule 31 (state_list_opt)

    state             go to state 68
    comp_state        go to state 44
    expr              go to state 47
    assign_expr       go to state 48
    logical_OR_expr   go to state 49
    logical_AND_expr  go to state 50
    equality_expr     go to state 51
    relation_expr     go to state 52
    add_expr          go to state 53
    mult_expr         go to state 54
    unary_expr        go to state 55
    postfix_expr      go to state 56
    prim_expr         go to state 57


state 47

   20 state: expr . ';'
   37 expr: expr . ',' assign_expr

    ';'  shift, and go to state 69
    ','  shift, and go to state 70


state 48

   36 expr: assign_expr .

    $default  reduce using rule 36 (expr)


state 49

   38 assign_expr: logical_OR_expr .
   41 logical_OR_expr: logical_OR_expr . OR logical_AND_expr

    OR  shift, and go to state 71

    $default  reduce using rule 38 (assign_expr)


state 50

   40 logical_OR_expr: logical_AND_expr .
   43 logical_AND_expr: logical_AND_expr . AND equality_expr

    AND  shift, and go to state 72

    $default  reduce using rule 40 (logical_OR_expr)


state 51

   42 logical_AND_expr: equality_expr .
   45 equality_expr: equality_expr . EQ relation_expr
   46              | equality_expr . NE relation_expr

    EQ  shift, and go to state 73
    NE  shift, and go to state 74

    $default  reduce using rule 42 (logical_AND_expr)


state 52

   44 equality_expr: relation_expr .
   48 relation_expr: relation_expr . LT add_expr
   49              | relation_expr . MT add_expr
   50              | relation_expr . ELT add_expr
   51              | relation_expr . EMT add_expr

    LT   shift, and go to state 75
    MT   shift, and go to state 76
    ELT  shift, and go to state 77
    EMT  shift, and go to state 78

    $default  reduce using rule 44 (equality_expr)


state 53

   47 relation_expr: add_expr .
   53 add_expr: add_expr . PLUS mult_expr
   54         | add_expr . MINUS mult_expr

    PLUS   shift, and go to state 79
    MINUS  shift, and go to state 80

    $default  reduce using rule 47 (relation_expr)


state 54

   52 add_expr: mult_expr .
   56 mult_expr: mult_expr . TIMES unary_expr
   57          | mult_expr . DIV unary_expr

    TIMES  shift, and go to state 81
    DIV    shift, and go to state 82

    $default  reduce using rule 52 (add_expr)


state 55

   55 mult_expr: unary_expr .

    $default  reduce using rule 55 (mult_expr)


state 56

   58 unary_expr: postfix_expr .

    $default  reduce using rule 58 (unary_expr)


state 57

   60 postfix_expr: prim_expr .

    $default  reduce using rule 60 (postfix_expr)


state 58

   33 declaration_list: declaration_list declaration .

    $default  reduce using rule 33 (declaration_list)


state 59

   39 assign_expr: IDENTIFIER ASSIGN . assign_expr

    CONST       shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    MINUS       shift, and go to state 40
    '('         shift, and go to state 42

    assign_expr       go to state 83
    logical_OR_expr   go to state 49
    logical_AND_expr  go to state 50
    equality_expr     go to state 51
    relation_expr     go to state 52
    add_expr          go to state 53
    mult_expr         go to state 54
    unary_expr        go to state 55
    postfix_expr      go to state 56
    prim_expr         go to state 57


state 60

   61 postfix_expr: IDENTIFIER '(' . argu_expr_list_opt ')'

    CONST       shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    MINUS       shift, and go to state 40
    '('         shift, and go to state 42

    $default  reduce using rule 62 (argu_expr_list_opt)

    assign_expr         go to state 84
    logical_OR_expr     go to state 49
    logical_AND_expr    go to state 50
    equality_expr       go to state 51
    relation_expr       go to state 52
    add_expr            go to state 53
    mult_expr           go to state 54
    unary_expr          go to state 55
    postfix_expr        go to state 56
    argu_expr_list_opt  go to state 85
    prim_expr           go to state 57
    argu_expr_list      go to state 86


state 61

   22 state: IF '(' . expr ')' state
   23      | IF '(' . expr ')' state ELSE state

    CONST       shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    MINUS       shift, and go to state 40
    '('         shift, and go to state 42

    expr              go to state 87
    assign_expr       go to state 48
    logical_OR_expr   go to state 49
    logical_AND_expr  go to state 50
    equality_expr     go to state 51
    relation_expr     go to state 52
    add_expr          go to state 53
    mult_expr         go to state 54
    unary_expr        go to state 55
    postfix_expr      go to state 56
    prim_expr         go to state 57


state 62

   24 state: WHILE '(' . expr ')' state

    CONST       shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    MINUS       shift, and go to state 40
    '('         shift, and go to state 42

    expr              go to state 88
    assign_expr       go to state 48
    logical_OR_expr   go to state 49
    logical_AND_expr  go to state 50
    equality_expr     go to state 51
    relation_expr     go to state 52
    add_expr          go to state 53
    mult_expr         go to state 54
    unary_expr        go to state 55
    postfix_expr      go to state 56
    prim_expr         go to state 57


state 63

   25 state: RETURN expr . ';'
   37 expr: expr . ',' assign_expr

    ';'  shift, and go to state 89
    ','  shift, and go to state 70


state 64

   61 postfix_expr: IDENTIFIER . '(' argu_expr_list_opt ')'
   64 prim_expr: IDENTIFIER .

    '('  shift, and go to state 60

    $default  reduce using rule 64 (prim_expr)


state 65

   59 unary_expr: MINUS unary_expr .

    $default  reduce using rule 59 (unary_expr)


state 66

   37 expr: expr . ',' assign_expr
   66 prim_expr: '(' expr . ')'

    ','  shift, and go to state 70
    ')'  shift, and go to state 90


state 67

   27 comp_state: '{' @4 declaration_list_opt state_list_opt '}' .

    $default  reduce using rule 27 (comp_state)


state 68

   35 state_list: state_list state .

    $default  reduce using rule 35 (state_list)


state 69

   20 state: expr ';' .

    $default  reduce using rule 20 (state)


state 70

   37 expr: expr ',' . assign_expr

    CONST       shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    MINUS       shift, and go to state 40
    '('         shift, and go to state 42

    assign_expr       go to state 91
    logical_OR_expr   go to state 49
    logical_AND_expr  go to state 50
    equality_expr     go to state 51
    relation_expr     go to state 52
    add_expr          go to state 53
    mult_expr         go to state 54
    unary_expr        go to state 55
    postfix_expr      go to state 56
    prim_expr         go to state 57


state 71

   41 logical_OR_expr: logical_OR_expr OR . logical_AND_expr

    CONST       shift, and go to state 35
    IDENTIFIER  shift, and go to state 64
    MINUS       shift, and go to state 40
    '('         shift, and go to state 42

    logical_AND_expr  go to state 92
    equality_expr     go to state 51
    relation_expr     go to state 52
    add_expr          go to state 53
    mult_expr         go to state 54
    unary_expr        go to state 55
    postfix_expr      go to state 56
    prim_expr         go to state 57


state 72

   43 logical_AND_expr: logical_AND_expr AND . equality_expr

    CONST       shift, and go to state 35
    IDENTIFIER  shift, and go to state 64
    MINUS       shift, and go to state 40
    '('         shift, and go to state 42

    equality_expr  go to state 93
    relation_expr  go to state 52
    add_expr       go to state 53
    mult_expr      go to state 54
    unary_expr     go to state 55
    postfix_expr   go to state 56
    prim_expr      go to state 57


state 73

   45 equality_expr: equality_expr EQ . relation_expr

    CONST       shift, and go to state 35
    IDENTIFIER  shift, and go to state 64
    MINUS       shift, and go to state 40
    '('         shift, and go to state 42

    relation_expr  go to state 94
    add_expr       go to state 53
    mult_expr      go to state 54
    unary_expr     go to state 55
    postfix_expr   go to state 56
    prim_expr      go to state 57


state 74

   46 equality_expr: equality_expr NE . relation_expr

    CONST       shift, and go to state 35
    IDENTIFIER  shift, and go to state 64
    MINUS       shift, and go to state 40
    '('         shift, and go to state 42

    relation_expr  go to state 95
    add_expr       go to state 53
    mult_expr      go to state 54
    unary_expr     go to state 55
    postfix_expr   go to state 56
    prim_expr      go to state 57


state 75

   48 relation_expr: relation_expr LT . add_expr

    CONST       shift, and go to state 35
    IDENTIFIER  shift, and go to state 64
    MINUS       shift, and go to state 40
    '('         shift, and go to state 42

    add_expr      go to state 96
    mult_expr     go to state 54
    unary_expr    go to state 55
    postfix_expr  go to state 56
    prim_expr     go to state 57


state 76

   49 relation_expr: relation_expr MT . add_expr

    CONST       shift, and go to state 35
    IDENTIFIER  shift, and go to state 64
    MINUS       shift, and go to state 40
    '('         shift, and go to state 42

    add_expr      go to state 97
    mult_expr     go to state 54
    unary_expr    go to state 55
    postfix_expr  go to state 56
    prim_expr     go to state 57


state 77

   50 relation_expr: relation_expr ELT . add_expr

    CONST       shift, and go to state 35
    IDENTIFIER  shift, and go to state 64
    MINUS       shift, and go to state 40
    '('         shift, and go to state 42

    add_expr      go to state 98
    mult_expr     go to state 54
    unary_expr    go to state 55
    postfix_expr  go to state 56
    prim_expr     go to state 57


state 78

   51 relation_expr: relation_expr EMT . add_expr

    CONST       shift, and go to state 35
    IDENTIFIER  shift, and go to state 64
    MINUS       shift, and go to state 40
    '('         shift, and go to state 42

    add_expr      go to state 99
    mult_expr     go to state 54
    unary_expr    go to state 55
    postfix_expr  go to state 56
    prim_expr     go to state 57


state 79

   53 add_expr: add_expr PLUS . mult_expr

    CONST       shift, and go to state 35
    IDENTIFIER  shift, and go to state 64
    MINUS       shift, and go to state 40
    '('         shift, and go to state 42

    mult_expr     go to state 100
    unary_expr    go to state 55
    postfix_expr  go to state 56
    prim_expr     go to state 57


state 80

   54 add_expr: add_expr MINUS . mult_expr

    CONST       shift, and go to state 35
    IDENTIFIER  shift, and go to state 64
    MINUS       shift, and go to state 40
    '('         shift, and go to state 42

    mult_expr     go to state 101
    unary_expr    go to state 55
    postfix_expr  go to state 56
    prim_expr     go to state 57


state 81

   56 mult_expr: mult_expr TIMES . unary_expr

    CONST       shift, and go to state 35
    IDENTIFIER  shift, and go to state 64
    MINUS       shift, and go to state 40
    '('         shift, and go to state 42

    unary_expr    go to state 102
    postfix_expr  go to state 56
    prim_expr     go to state 57


state 82

   57 mult_expr: mult_expr DIV . unary_expr

    CONST       shift, and go to state 35
    IDENTIFIER  shift, and go to state 64
    MINUS       shift, and go to state 40
    '('         shift, and go to state 42

    unary_expr    go to state 103
    postfix_expr  go to state 56
    prim_expr     go to state 57


state 83

   39 assign_expr: IDENTIFIER ASSIGN assign_expr .

    $default  reduce using rule 39 (assign_expr)


state 84

   67 argu_expr_list: assign_expr .

    $default  reduce using rule 67 (argu_expr_list)


state 85

   61 postfix_expr: IDENTIFIER '(' argu_expr_list_opt . ')'

    ')'  shift, and go to state 104


state 86

   63 argu_expr_list_opt: argu_expr_list .
   68 argu_expr_list: argu_expr_list . ',' assign_expr

    ','  shift, and go to state 105

    $default  reduce using rule 63 (argu_expr_list_opt)


state 87

   22 state: IF '(' expr . ')' state
   23      | IF '(' expr . ')' state ELSE state
   37 expr: expr . ',' assign_expr

    ','  shift, and go to state 70
    ')'  shift, and go to state 106


state 88

   24 state: WHILE '(' expr . ')' state
   37 expr: expr . ',' assign_expr

    ','  shift, and go to state 70
    ')'  shift, and go to state 107


state 89

   25 state: RETURN expr ';' .

    $default  reduce using rule 25 (state)


state 90

   66 prim_expr: '(' expr ')' .

    $default  reduce using rule 66 (prim_expr)


state 91

   37 expr: expr ',' assign_expr .

    $default  reduce using rule 37 (expr)


state 92

   41 logical_OR_expr: logical_OR_expr OR logical_AND_expr .
   43 logical_AND_expr: logical_AND_expr . AND equality_expr

    AND  shift, and go to state 72

    $default  reduce using rule 41 (logical_OR_expr)


state 93

   43 logical_AND_expr: logical_AND_expr AND equality_expr .
   45 equality_expr: equality_expr . EQ relation_expr
   46              | equality_expr . NE relation_expr

    EQ  shift, and go to state 73
    NE  shift, and go to state 74

    $default  reduce using rule 43 (logical_AND_expr)


state 94

   45 equality_expr: equality_expr EQ relation_expr .
   48 relation_expr: relation_expr . LT add_expr
   49              | relation_expr . MT add_expr
   50              | relation_expr . ELT add_expr
   51              | relation_expr . EMT add_expr

    LT   shift, and go to state 75
    MT   shift, and go to state 76
    ELT  shift, and go to state 77
    EMT  shift, and go to state 78

    $default  reduce using rule 45 (equality_expr)


state 95

   46 equality_expr: equality_expr NE relation_expr .
   48 relation_expr: relation_expr . LT add_expr
   49              | relation_expr . MT add_expr
   50              | relation_expr . ELT add_expr
   51              | relation_expr . EMT add_expr

    LT   shift, and go to state 75
    MT   shift, and go to state 76
    ELT  shift, and go to state 77
    EMT  shift, and go to state 78

    $default  reduce using rule 46 (equality_expr)


state 96

   48 relation_expr: relation_expr LT add_expr .
   53 add_expr: add_expr . PLUS mult_expr
   54         | add_expr . MINUS mult_expr

    PLUS   shift, and go to state 79
    MINUS  shift, and go to state 80

    $default  reduce using rule 48 (relation_expr)


state 97

   49 relation_expr: relation_expr MT add_expr .
   53 add_expr: add_expr . PLUS mult_expr
   54         | add_expr . MINUS mult_expr

    PLUS   shift, and go to state 79
    MINUS  shift, and go to state 80

    $default  reduce using rule 49 (relation_expr)


state 98

   50 relation_expr: relation_expr ELT add_expr .
   53 add_expr: add_expr . PLUS mult_expr
   54         | add_expr . MINUS mult_expr

    PLUS   shift, and go to state 79
    MINUS  shift, and go to state 80

    $default  reduce using rule 50 (relation_expr)


state 99

   51 relation_expr: relation_expr EMT add_expr .
   53 add_expr: add_expr . PLUS mult_expr
   54         | add_expr . MINUS mult_expr

    PLUS   shift, and go to state 79
    MINUS  shift, and go to state 80

    $default  reduce using rule 51 (relation_expr)


state 100

   53 add_expr: add_expr PLUS mult_expr .
   56 mult_expr: mult_expr . TIMES unary_expr
   57          | mult_expr . DIV unary_expr

    TIMES  shift, and go to state 81
    DIV    shift, and go to state 82

    $default  reduce using rule 53 (add_expr)


state 101

   54 add_expr: add_expr MINUS mult_expr .
   56 mult_expr: mult_expr . TIMES unary_expr
   57          | mult_expr . DIV unary_expr

    TIMES  shift, and go to state 81
    DIV    shift, and go to state 82

    $default  reduce using rule 54 (add_expr)


state 102

   56 mult_expr: mult_expr TIMES unary_expr .

    $default  reduce using rule 56 (mult_expr)


state 103

   57 mult_expr: mult_expr DIV unary_expr .

    $default  reduce using rule 57 (mult_expr)


state 104

   61 postfix_expr: IDENTIFIER '(' argu_expr_list_opt ')' .

    $default  reduce using rule 61 (postfix_expr)


state 105

   68 argu_expr_list: argu_expr_list ',' . assign_expr

    CONST       shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    MINUS       shift, and go to state 40
    '('         shift, and go to state 42

    assign_expr       go to state 108
    logical_OR_expr   go to state 49
    logical_AND_expr  go to state 50
    equality_expr     go to state 51
    relation_expr     go to state 52
    add_expr          go to state 53
    mult_expr         go to state 54
    unary_expr        go to state 55
    postfix_expr      go to state 56
    prim_expr         go to state 57


state 106

   22 state: IF '(' expr ')' . state
   23      | IF '(' expr ')' . state ELSE state

    CONST       shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    IF          shift, and go to state 37
    WHILE       shift, and go to state 38
    RETURN      shift, and go to state 39
    MINUS       shift, and go to state 40
    ';'         shift, and go to state 41
    '('         shift, and go to state 42
    '{'         shift, and go to state 27

    state             go to state 109
    comp_state        go to state 44
    expr              go to state 47
    assign_expr       go to state 48
    logical_OR_expr   go to state 49
    logical_AND_expr  go to state 50
    equality_expr     go to state 51
    relation_expr     go to state 52
    add_expr          go to state 53
    mult_expr         go to state 54
    unary_expr        go to state 55
    postfix_expr      go to state 56
    prim_expr         go to state 57


state 107

   24 state: WHILE '(' expr ')' . state

    CONST       shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    IF          shift, and go to state 37
    WHILE       shift, and go to state 38
    RETURN      shift, and go to state 39
    MINUS       shift, and go to state 40
    ';'         shift, and go to state 41
    '('         shift, and go to state 42
    '{'         shift, and go to state 27

    state             go to state 110
    comp_state        go to state 44
    expr              go to state 47
    assign_expr       go to state 48
    logical_OR_expr   go to state 49
    logical_AND_expr  go to state 50
    equality_expr     go to state 51
    relation_expr     go to state 52
    add_expr          go to state 53
    mult_expr         go to state 54
    unary_expr        go to state 55
    postfix_expr      go to state 56
    prim_expr         go to state 57


state 108

   68 argu_expr_list: argu_expr_list ',' assign_expr .

    $default  reduce using rule 68 (argu_expr_list)


state 109

   22 state: IF '(' expr ')' state .
   23      | IF '(' expr ')' state . ELSE state

    ELSE  shift, and go to state 111

    ELSE      [reduce using rule 22 (state)]
    $default  reduce using rule 22 (state)


state 110

   24 state: WHILE '(' expr ')' state .

    $default  reduce using rule 24 (state)


state 111

   23 state: IF '(' expr ')' state ELSE . state

    CONST       shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    IF          shift, and go to state 37
    WHILE       shift, and go to state 38
    RETURN      shift, and go to state 39
    MINUS       shift, and go to state 40
    ';'         shift, and go to state 41
    '('         shift, and go to state 42
    '{'         shift, and go to state 27

    state             go to state 112
    comp_state        go to state 44
    expr              go to state 47
    assign_expr       go to state 48
    logical_OR_expr   go to state 49
    logical_AND_expr  go to state 50
    equality_expr     go to state 51
    relation_expr     go to state 52
    add_expr          go to state 53
    mult_expr         go to state 54
    unary_expr        go to state 55
    postfix_expr      go to state 56
    prim_expr         go to state 57


state 112

   23 state: IF '(' expr ')' state ELSE state .

    $default  reduce using rule 23 (state)
